body{
    margin: 10px;
}
#yourphoto,#coffee {
    float: left;
    width: 200px;
    height: 200px;
    margin-right: 20px;
    /*Space between photo and text*/
}
video{
    float: left;
    width: 500px;
    height: auto;
    margin-right: 20px;
    object-fit: cover;
}

span{
background-color:blue
}
#yourphoto {
    border-radius: 100px;
    /*half of width makes the photo round*/
}

#coffee {
    /*Conceptually their is a box around every element in html*/
    object-fit: cover;
}

.username {
    color: yellow;
}

ul {
    list-style: none;
}
a[href^="https"][href$=".com"]{
    color: yellowgreen;
}
/*Pseudo Class--To style element in a particular state*/
article p:last-of-type{
    font-style: italic;
}
ul li:nth-child(odd){
    color: green
}

a:visited,
a:link{
    color:brown;
}

a:hover, a:focus{
    color:red;
}
/*Pseudo Element--To Style part of  an element*/
p::first-letter{
    font-size: 140%;
    font-weight: bold;
}

p::selection{
    background-color:pink;
}

p::after{
    content: "... ";
    
}
/*CSS gradient.io*/
.article1{
    
    text-shadow:3px 3px 5px purple ;
    background-image: linear-gradient(10deg, red, yellow 60%, lightblue 10%);
}
.article2{
    /*position: absolute;
    top: 20px;
    right: 2px;*/
    
    height: auto;
    background-image: radial-gradient( pink,yellow);
    box-shadow: 0 0 30px blue;
    
}

/*Positioning
Relative-Relative to its normal positioning other elements are not affected by it
Asolute-Relative to parent
Fixed-Relative to vieport
*/
/*CSS Tricks -- shapes diff*/


/*Box Model ---MBPContent*/

article{
    width: 47%;
    height: auto;
    
}

/*Flexbox
Axes-main(primary),cross(secondary)
default-row
Row-x(main), y(cross)
Column-y(main),x(cross)

Aligning items
justify-content:(along the main axis)
align-items:(along the cross axis)
align-content: Works only when we have multiple lines in the flex container

flex
flex-basis
flex-grow
flex-shrink
*/

.article{
    margin:2px;
    padding:5px;
    display: flex;
    justify-content:space-evenly;
    /*position: relative;
       border: 2px solid #ccc;
    */

}
/*Measurement units
%--------relative to the size of the container
em,rem--relative to font size(16px) #
convert it to 10=62.5% of 16 px
so ->font-size:62.5%
vh,cw----relative to viewport
The viewport is the user's visible area of a web page. 
The viewport varies with the device,
 and will be smaller on a mobile phone than on a computer screen

*/


/*Float
By default Parent element don't see Floated element
----clear is used after Float element to make it recoganize
*/

.twitter{
    border: 2px solid black;
    margin: 10rem;
}

/*Float
.clearFix::after{
    content:'';
    display:block;
    clear:both;
}
*/
.FloatBox{
    width: 5rem;
    height: 5rem;
    background-color:goldenrod;
    float: left;
    margin:0 0.5rem;
}

.clear{
    margin-left: 0.5rem;
    clear: both;
}

.boxes{
    border: 3px solid gray;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;
    flex-wrap: wrap;
    align-content: center;
    height: 90vh;
    
}
.box{
    flex-shrink:5 ;
    flex: 6rem;
    width:5rem;
    height:5rem;
    background-color: aqua;
    margin:1rem;
    
}
/*Sizing Items
flex-basis(initial size of the flex item)
flex-grow(the growth factor)
flex-shrink(the shrink factor)
flex-combines the above three
*/

/*Flexbox===To layout in elements in a row or column
Grid===To layout elements in both row and column*/

/*Defining a Grid*/

/*
Grid
content-Entire content or the grid
items-individual items of the grid
justify-items:-along the horizontal axis
align-items:-along the verticle axis
 grid-template: repeat(4,500px)/repeat(3,500px);
fr---fraction % of space  left
*/
.container{
    display: grid;
    /*4*3*/
    grid-template: repeat(4,500px)/repeat(3,500px);
    border: 5px dotted black;
    justify-items: stretch;
    align-items: stretch;
}
